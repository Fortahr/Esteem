#pragma once

#ifdef GL_FLOAT

#define TYPE_HALF GL_HALF_FLOAT
#define TYPE_SINGLE GL_FLOAT
#define TYPE_DOUBLE GL_DOUBLE

#define TYPE_BYTE GL_BYTE
#define TYPE_SHORT GL_SHORT
#define TYPE_INT GL_INT

#define TYPE_UBYTE GL_UNSIGNED_BYTE
#define TYPE_USHORT GL_UNSIGNED_SHORT
#define TYPE_UINT GL_UNSIGNED_INT

#else

#define TYPE_HALF 0x140B
#define TYPE_SINGLE 0x1406
#define TYPE_DOUBLE 0x140A

#define TYPE_BYTE 0x1400
#define TYPE_SHORT 0x1402
#define TYPE_INT 0x1404

#define TYPE_UBYTE 0x1401
#define TYPE_USHORT 0x1403
#define TYPE_UINT 0x1405

#endif

namespace Esteem
{
	enum class TEXTURE_FILTER : unsigned short
	{
#ifdef GL_NEAREST
		NEAREST = GL_NEAREST,
		LINEAR = GL_LINEAR,
		NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
		LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,
		NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
		LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR
#else
		NEAREST = 0x2600,
		LINEAR = 0x2601,
		NEAREST_MIPMAP_NEAREST = 0x2700,
		LINEAR_MIPMAP_NEAREST = 0x2701,
		NEAREST_MIPMAP_LINEAR = 0x2702,
		LINEAR_MIPMAP_LINEAR = 0x2703
#endif
	};

	enum class TEXTURE_REPEAT : unsigned short
	{
#ifdef GL_REPEAT
		REPEAT = GL_REPEAT,
		CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE,
		CLAMP_TO_BORDER = GL_CLAMP_TO_BORDER,
		MIRRORED_REPEAT = GL_MIRRORED_REPEAT,
		MIRROR_CLAMP_TO_EDGE = GL_MIRROR_CLAMP_TO_EDGE,
#else
		REPEAT = 0x2901,
		CLAMP_TO_EDGE = 0x812F,
		CLAMP_TO_BORDER = 0x812D,
		MIRRORED_REPEAT = 0x8370,
		MIRROR_CLAMP_TO_EDGE = 0x8743
#endif
	};

	enum class TRIANGLE_TYPE : unsigned char
	{
#ifdef GL_FLOAT
		TRIANGLES = GL_TRIANGLES,
		TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
		TRIANGLE_FAN = GL_TRIANGLE_FAN
#else
		TRIANGLES = 0x004,
		TRIANGLE_STRIP = 0x005,
		TRIANGLE_FAN = 0x006
#endif
	};

	enum class UPLOAD_TYPE : unsigned char
	{
		STATIC,
		DYNAMIC,
		STREAM
	};

	enum class TEXTURE_FORMAT : unsigned short
	{
#ifdef GL_RED
		R = GL_RED,
		RI = GL_RED_INTEGER,
		R_8I_NORMALIZED = GL_R8_SNORM,
		R_8U_NORMALIZED = GL_R8,
		R_8I = GL_R8I,
		R_8U = GL_R8UI,
		R_16I = GL_R16I,
		R_16U = GL_R16UI,
		R_32I = GL_R32I,
		R_32U = GL_R32UI,
		R_16F = GL_R16F,
		R_32F = GL_R32F,

		RG = GL_RG,
		RGI = GL_RG_INTEGER,
		RG_8I_NORMALIZED = GL_RG8_SNORM,
		RG_8U_NORMALIZED = GL_RG8,
		RG_8I = GL_RG8I,
		RG_8U = GL_RG8UI,
		RG_16I = GL_RG16I,
		RG_16U = GL_RG16UI,
		RG_32I = GL_RG32I,
		RG_32U = GL_RG32UI,
		RG_16F = GL_RG16F,
		RG_32F = GL_RG32F,

		RGB = GL_RGB,
		RGBI = GL_RGB_INTEGER,
		RGB_8I_NORMALIZED = GL_RGB8_SNORM,
		RGB_8U_NORMALIZED = GL_RGB8,
		RGB_8I = GL_RGB8I,
		RGB_8U = GL_RGB8UI,
		RGB_16I = GL_RGB16I,
		RGB_16U = GL_RGB16UI,
		RGB_32I = GL_RGB32I,
		RGB_32U = GL_RGB32UI,
		RGB_16F = GL_RGB16F,
		RGB_32F = GL_RGB32F,

		RGBA = GL_RGBA,
		RGBAI = GL_RGBA_INTEGER,
		RGBA_8I_NORMALIZED = GL_RGBA8_SNORM,
		RGBA_8U_NORMALIZED = GL_RGBA8,
		RGBA_8I = GL_RGBA8I,
		RGBA_8U = GL_RGBA8UI,
		RGBA_16I = GL_RGBA16I,
		RGBA_16U = GL_RGBA16UI,
		RGBA_32I = GL_RGBA32I,
		RGBA_32U = GL_RGBA32UI,
		RGBA_16F = GL_RGBA16F,
		RGBA_32F = GL_RGBA32F,

		DEPTH = GL_DEPTH_COMPONENT,
		DEPTH_16U = GL_DEPTH_COMPONENT16,
		DEPTH_24U = GL_DEPTH_COMPONENT24,
		DEPTH_32F = GL_DEPTH_COMPONENT32F,

		DEPTH_STENCIL = GL_DEPTH_STENCIL,
		DEPTH_24U_STENCIL_8U = GL_DEPTH24_STENCIL8,
		DEPTH_32F_STENCIL_8U = GL_DEPTH32F_STENCIL8

#else
		R = 0x1903,
		RI = 0x8D94,
		R_8I_NORMALIZED = 0x8F94,
		R_8U_NORMALIZED = 0x8229,
		R_8I = 0x8231,
		R_8U = 0x8232,
		R_16I = 0x8233,
		R_16U = 0x8234,
		R_32I = 0x8235,
		R_32U = 0x8236,
		R_16F = 0x822D,
		R_32F = 0x822E,

		RG = 0x8227,
		RGI = 0x8228,
		RG_8I_NORMALIZED = 0x8F95,
		RG_8U_NORMALIZED = 0x822B,
		RG_8I = 0x8237,
		RG_8U = 0x8238,
		RG_16I = 0x8239,
		RG_16U = 0x823A,
		RG_32I = 0x823B,
		RG_32U = 0x823C,
		RG_16F = 0x822F,
		RG_32F = 0x8230,

		RGB = 0x1907,
		RGBI = 0x8D98,
		RGB_8I_NORMALIZED = 0x8F96,
		RGB_8U_NORMALIZED = 0x8051,
		RGB_8I = 0x8D8F,
		RGB_8U = 0x8D7D,
		RGB_16I = 0x8D89,
		RGB_16U = 0x8D77,
		RGB_32I = 0x8D83,
		RGB_32U = 0x8D71,
		RGB_16F = 0x881B,
		RGB_32F = 0x8815,

		RGBA = 0x1908,
		RGBAI = 0x8D99,
		RGBA_8I_NORMALIZED = 0x8F97,
		RGBA_8U_NORMALIZED = 0x8058,
		RGBA_8I = 0x8D8E,
		RGBA_8U = 0x8D7C,
		RGBA_16I = 0x8D88,
		RGBA_16U = 0x8D76,
		RGBA_32I = 0x8D82,
		RGBA_32U = 0x8D70,
		RGBA_16F = 0x881A,
		RGBA_32F = 0x8814,

		DEPTH = 0x1902,
		DEPTH_16U = 0x81A5,
		DEPTH_24U = 0x81A6,
		DEPTH_32F = 0x8CAC,

		DEPTH_STENCIL = 0x84F9,
		DEPTH_24U_STENCIL_8U = 0x88F0,
		DEPTH_32F_STENCIL_8U = 0x8CAD,

		MAJOR_DEPTH = 0x1902,
		MAJOR_DEPTH_STENCIL = 0x84F9,

		// still being used?
		MAJOR_ALPHA = 0x1906,
		MAJOR_LUMINANCE = 0x1909,
		MAJOR_LUMINANCE_ALPHA = 0x190A
#endif
	};

	enum class IMAGE_FORMAT : unsigned short
	{
		R = (unsigned int)TEXTURE_FORMAT::R,
		R_INTEGER = (unsigned int)TEXTURE_FORMAT::RI,
		RG = (unsigned int)TEXTURE_FORMAT::RG,
		RG_INTEGER = (unsigned int)TEXTURE_FORMAT::RGI,
		RGB = (unsigned int)TEXTURE_FORMAT::RGB,
		RGB_INTEGER = (unsigned int)TEXTURE_FORMAT::RGBI,
		RGBA = (unsigned int)TEXTURE_FORMAT::RGBA,
		RGBA_INTEGER = (unsigned int)TEXTURE_FORMAT::RGBAI
	};
}